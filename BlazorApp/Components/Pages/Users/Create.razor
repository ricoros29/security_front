@page "/user/create"
@inject ILogger<IUser> _logger
@inject NavigationManager navigation
@* @inject Blazored.SessionStorage.ISessionStorageService sessionStorage *@
@rendermode InteractiveServer
@attribute [StreamRendering]
@inject IJSRuntime JS


<PageTitle>Nuevo usuario</PageTitle>

<div class="container-fluid">
    <h1>Nuevo usuario</h1>
    <div class="card">
        <div class="card-body">
            @if (user is null || IsLoading)
            {
                <div class="spinner-grow spinner-grow-sm text-primary" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
                <div class="spinner-grow spinner-grow-sm text-primary" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
                <div class="spinner-grow spinner-grow-sm text-primary" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
            }
            else
            {
                <EditForm method="post" Model="user" OnValidSubmit="AddUser" FormName="create" Enhance>
                    <div class="row g-3">
                        <div class="col-md-4">
                            <label for="cuenta" class="form-label">Cuenta de Usuario <span class="text-danger">*</span></label>
                            <InputText id="cuenta" @bind-Value="user!.Cuenta" @bind-Value:after="OnValidateAccount" class="form-control" disabled="@IsDisabled" />
                            <ValidationMessage For="() => user!.Cuenta" class="text-danger" />
                        </div>
                        <div class="col-md-4">
                            <label for="password" class="form-label">Contraseña <span class="text-danger">*</span></label>
                            <InputText id="password" @bind-Value="user!.Password" class="form-control credential" autocomplete="off" disabled="@IsDisabled" />
                            <ValidationMessage For="() => user!.Password" class="text-danger" />
                        </div>
                        <div class="col-md-4">
                        </div>
                        <div class="col-md-4">
                            <label for="nombre" class="form-label">Nombre <span class="text-danger">*</span></label>
                            <InputText id="nombre" @bind-Value="user!.Nombre" class="form-control" disabled="@IsDisabled" />
                            <ValidationMessage For="() => user!.Nombre" class="text-danger" />
                        </div>
                        <div class="col-md-4">
                            <label for="paterno" class="form-label">Apellido Paterno <span class="text-danger">*</span></label>
                            <InputText id="paterno" @bind-Value="user!.ApellidoPaterno" class="form-control" disabled="@IsDisabled" />
                            <ValidationMessage For="() => user!.ApellidoPaterno" class="text-danger" />
                        </div>
                        <div class="col-md-4">
                            <label for="materno" class="form-label">Apellido Materno</label>
                            <InputText id="materno" @bind-Value="user!.ApellidoMaterno" class="form-control" disabled="@IsDisabled" />
                            <ValidationMessage For="() => user!.ApellidoMaterno" class="text-danger" />
                        </div>

                        <div class="col-md-4">
                            <label for="rfc" class="form-label">RFC <span class="text-danger">*</span></label>
                            <InputText id="rfc" @bind-Value="user!.Rfc" class="form-control" disabled="@IsDisabled" />
                            <ValidationMessage For="() => user!.Rfc" class="text-danger" />
                        </div>
                        <div class="col-md-4">
                            <label for="correoelectronico" class="form-label">Correo Electrónico <span class="text-danger">*</span></label>
                            <InputText id="correoelectronico" type="email" @bind-Value="user!.CorreoElectronico"
                                       class="form-control" placeholder="email@example.com.mx" aria-label="CorreoElectronico" disabled="@IsDisabled" />
                            <ValidationMessage For="() => user!.CorreoElectronico" class="text-danger" />
                        </div>
                        <div class="col-md-4">
                            <label for="numeroempleado" class="form-label">Número de Empleado</label>
                            <InputText id="numeroempleado" @bind-Value="user!.NoEmpleado" class="form-control" disabled="true" />
                            <ValidationMessage For="() => user!.NoEmpleado" class="text-danger" />
                        </div>
                        <div class="col-md-4">
                            <label for="idestado" class="form-label">Entidad Federativa <span class="text-danger">*</span></label>
                            <InputSelect id="idestado" class="form-select" @bind-Value="user!.IdEstado" @bind-Value:after="OnChangedEstado" disabled="@IsDisabled">
                                @if (ListaEstados != null)
                                {
                                    foreach (var item in ListaEstados)
                                    {
                                        <option value="@item.Value">@item.Text</option>
                                    }
                                }
                            </InputSelect>
                        </div>
                        <div class="col-md-8">
                            <label for="iddependencia" class="form-label">Dependencia <span class="text-danger">*</span></label>
                            <InputSelect id="iddependencia" class="form-select" @bind-Value="user!.IdDependenciaOrigen" disabled="@IsDisabled">
                                @if (ListaDependencias != null)
                                {
                                    foreach (var item in ListaDependencias)
                                    {
                                        <option value="@item.Value">@item.Text</option>
                                    }
                                }
                            </InputSelect>
                        </div>
                        <div class="col-md-4">
                            <label for="cargo" class="form-label">Cargo <span class="text-danger">*</span></label>
                            <InputText id="cargo" @bind-Value="user!.Cargo" class="form-control" />
                            <ValidationMessage For="() => user!.Cargo" class="text-danger" />
                        </div>
                        <div class="col-md-8">
                            <label for="unidadadministrativa" class="form-label">Unidad Administrativa <span class="text-danger">*</span></label>
                            <InputText id="unidadadministrativa" @bind-Value="user!.UnidadAdministrativa"
                                       class="form-control" disabled="@IsDisabled" />
                            <ValidationMessage For="() => user!.UnidadAdministrativa" class="text-danger" />
                        </div>
                        <div class="col-md-4">
                            <label for="idmodulo" class="form-label">Módulo <span class="text-danger">*</span></label>
                            <InputSelect id="idmodulo" class="form-select" @bind-Value="user!.IdModulo"
                                         @bind-Value:after="OnChangedModulo" disabled="@IsDisabled">
                                @if (ListaModulos != null)
                                {
                                    foreach (var item in ListaModulos)
                                    {
                                        <option value="@item.Value">@item.Text</option>
                                    }
                                }
                            </InputSelect>
                        </div>
                        <div class="col-md-4">
                            <label for="idrol" class="form-label">Rol <span class="text-danger">*</span></label>
                            <InputSelect id="idrol" class="form-select" @bind-Value="user!.IdRol" disabled="@IsDisabled">
                                @if (ListaRoles != null)
                                {
                                    foreach (var item in ListaRoles)
                                    {
                                        <option value="@item.Value">@item.Text</option>
                                    }
                                }
                            </InputSelect>
                        </div>
                        <div class="col-12">
                            <div class="d-grid gap-2 d-md-block">
                                <button type="reset" class="btn btn-primary" @onclick="ClearForm">Nuevo<i class="bi bi-person-plus-fill"></i></button>
                                <button type="submit" class="btn btn-primary" disabled="@IsSubmitting">
                                    @if (IsLoading)
                                    {
                                        <span class="spinner-border spinner-border-sm mr-1"></span>
                                    }
                                    Guardar<i class="bi bi-floppy2-fill"></i>
                                </button>
                            </div>
                        </div>
                    </div>
                    <DataAnnotationsValidator />
                    @*  <ValidationSummary class="text-danger" role="alert" /> *@
                </EditForm>
            }
            @if (!string.IsNullOrEmpty(message))
            {
                <div class="alert alert-success mt-3 mb-0">@message</div>
            }
            @if (!string.IsNullOrEmpty(error))
            {
                <div class="alert alert-danger mt-3 mb-0">@error</div>
            }
        </div>
    </div>
    @if (user != null)
    {
        <div class="alert alert-light" role="alert">
            <a class="link-primary" href="@($"/home")">Ir a Inicio</a> |
            <a class="link-primary" href="@($"/user/find")">Ir a Consulta</a>
        </div>
    }
</div>

@code {

    [SupplyParameterFromForm]
    private UserDTO? user { get; set; } = new();

    private string token = string.Empty;
    private string message = string.Empty;
    private string error = string.Empty;
    private bool IsLoading = false;
    private bool IsDisabled { get; set; } = false;
    private bool IsSubmitting { get; set; } = false;

    public List<SelectListItem>? ListaEstados { get; set; }
    public List<SelectListItem>? ListaDependencias { get; set; }
    public List<SelectListItem>? ListaModulos { get; set; }
    public List<SelectListItem>? ListaRoles { get; set; }
    public bool ExistAccount = false;

    protected override void OnInitialized()
    {
        if (GlobalState.Session == null || GlobalState.Session.Expires < DateTime.UtcNow)
        {
            GlobalState.Session = null;
            navigation.NavigateTo("/");
        }
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            this.IsLoading = true;

            this.token = GlobalState.Session.Token;
            await LoadSelect();
        }
        catch (Exception ex)
        {
            this.error = ex.Message;
            _logger.LogError(ex.Message);
        }
        finally
        {
            this.IsLoading = false;
        }
    }


    protected async Task AddUser()
    {
        if (IsSubmitting)
            return;

        bool confirmed = await JS.InvokeAsync<bool>("confirm", "¿Deseas continuar?");
        if (!confirmed)
            return;

        try
        {
            this.IsLoading = true;
            this.IsSubmitting = true;
            this.IsDisabled = true;
            this.message = string.Empty;
            this.error = string.Empty;

            _logger.LogInformation("JSON: {0}", JsonConvert.SerializeObject(user));

            var userSave = await _service.PostAsync<UserDTO?>("/api/user/Create", user, token);

            if (userSave != null)
            {
                message = $"El usuario se registró exitósamente. Cuenta: {userSave.Cuenta}, Contraseña: {userSave.Password}";
            }
        }
        catch (Exception ex)
        {
            this.error = ex.Message;
            _logger.LogError(ex.Message);
        }
        finally
        {
            this.IsLoading = false;
            this.IsSubmitting = false; //true para que se habilite desde botón nuevo
            this.IsDisabled = false;
        }
    }

    private void ClearForm()
    {
        this.user = new();
        this.IsLoading = false;
        this.IsSubmitting = false;
        this.IsDisabled = false;
        this.message = string.Empty;
        this.error = string.Empty;
    }

    private async Task LoadSelect()
    {
        try
        {
            this.ListaEstados ??= await _service.GetCatalogo("estados", token);
            this.ListaModulos ??= await _service.GetCatalogo("modulos", token);
        }
        catch (Exception)
        {
            throw;
        }
    }

    async Task OnValidateAccount()
    {
        this.IsLoading = true;
        this.error = string.Empty;

        try
        {
            if (!string.IsNullOrEmpty(user.Cuenta) && user.Cuenta.Length > 5)
            {
                var parameters = new Dictionary<string, string>();
                parameters.Add("account", user.Cuenta);

                ExistAccount = await _service.GetAsync<bool>("/api/user/ExistAccount", parameters, token);

                if (ExistAccount)
                {
                    this.error = $"Ya existe un usuario con la cuenta {user.Cuenta.ToUpper()}";
                    //await JS.InvokeVoidAsync("alert", $"Ya existe un usuario con la cuenta {user.Cuenta.ToUpper()}");
                    user.Cuenta = string.Empty;
                }
            }
        }
        catch (Exception ex)
        {
            this.error = ex.Message;
            _logger.LogError(ex.Message);
            user.Cuenta = string.Empty;
        }
        finally
        {
            this.IsLoading = false;
        }
    }

    async Task OnChangedModulo()
    {
        try
        {
            user.IdRol = 0;
            if (user.IdModulo == null || user.IdModulo == 0)
            {
                this.ListaRoles = null;
            }
            else
            {
                List<SelectListItem> list = await _service.GetCatalogo("roles", token, user.IdModulo);
                this.ListaRoles = list;
            }
        }
        catch (Exception ex)
        {
            this.error = ex.Message;
        }
    }

    async Task OnChangedEstado()
    {
        try
        {
            user.IdDependenciaOrigen = 0;
            if (user.IdEstado == null || user.IdEstado == 0)
            {
                this.ListaDependencias = null;
            }
            else
            {
                List<SelectListItem> list = await _service.GetCatalogo("dependenciaorigen", token, user.IdEstado);
                this.ListaDependencias = list;
            }
        }
        catch (Exception ex)
        {
            this.error = ex.Message;
        }
    }
}