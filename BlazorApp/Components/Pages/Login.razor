@page "/"
@using BlazorApp.DTO.Security
@inject NavigationManager navigation
@rendermode InteractiveServer
@attribute [StreamRendering]

<PageTitle>Iniciar sesión</PageTitle>

<div class="container-fluid">
    <div class="mx-auto mt-5" style="width:400px; height:300px;">
        <div class="card" style="background-color:rgba(250,250,250,.9)">
            <div class="card-body px-5 py-5">
                @* <h1 class="card-title text-primary text-center mb-2"><i class="bi bi-person-lock"></i></h1> *@
                <p class="text-body-secondary small text-center mb-5">Favor de ingresar usuario y contraseña</p>
                <EditForm method="post" Model="credentials" OnValidSubmit="AuthenticateUser" FormName="login" Enhance>
                    <div class="row mb-4">
                        <div class="col-12">
                            <div class="input-group">
                                <span class="input-group-text" id="inputGroup-sizing-sm"><Icon Name="IconName.PersonFill" /></span>
                                <InputText id="username" @bind-Value="credentials.Username" class="form-control credential" autocomplete="off" placeholder="Usuario" aria-describedby="inputGroup-sizing-sm" />
                            </div>
                            <ValidationMessage For="() => credentials.Username" class="text-danger" />
                        </div>
                    </div>
                    <div class="row mb-5">
                        <div class="col-12">
                            <div class="input-group">
                                <span class="input-group-text" id="inputGroup-sizing-sm-pwd"><Icon Name="IconName.KeyFill" /></span>
                                <InputText type="password" id="password" @bind-Value="credentials.Password" class="form-control credential" placeholder="Contraseña" aria-describedby="inputGroup-sizing-sm-pwd" />
                            </div>
                            <ValidationMessage For="() => credentials.Password" class="text-danger" />
                        </div>
                    </div>
                    <div class="row mb-2">
                        <div class="col-12">
                            <div class="d-grid gap-2 mb-2">
                                <button type="submit" class="btn btn-primary" disabled="@IsSubmitting">
                                    Iniciar sesión<i class="bi bi-box-arrow-in-right"></i>
                                    @if (IsLoading)
                                    {
                                        <span class="spinner-border spinner-border-sm mr-1"></span>
                                    }
                                </button>
                            </div>
                        </div>
                    </div>
                    <DataAnnotationsValidator />
                </EditForm>
                @if (!string.IsNullOrEmpty(error))
                {
                    <div class="alert alert-danger mt-3 mb-0">@error</div>
                }
            </div>
        </div>
    </div>
</div>
@code {
    [SupplyParameterFromForm]
    private CredentialsDTO credentials { get; set; } = new();
    private string error { get; set; } = string.Empty;
    private bool IsLoading = false;
    private bool IsSubmitting { get; set; } = false;

    protected override void OnInitialized()
    {
        // redirect to home if already logged in
        if (GlobalState.Session != null)
        {
            navigation.NavigateTo("/home");
        }
    }

    protected async Task AuthenticateUser()
    {
        if (IsSubmitting)
            return;

        try
        {
            IsSubmitting = true;
            IsLoading = true;

            var result = await _service.LoginAsync(credentials);

            if (result != null)
            {
                //GlobalState.Token = result.Token;
                GlobalState.Session = result;
                navigation.NavigateTo("/home");
            }
        }
        catch (Exception ex)
        {
            this.error = ex.Message;
        }
        finally
        {
            IsSubmitting = false;
            IsLoading = false;
        }
    }

}
